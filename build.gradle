plugins {
    id 'java'
    id 'war'
    id "fish.payara.micro-gradle-plugin" version "1.1.0"

}

group = 'org.alquama00s'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

payaraMicro {
    deployWar = true
}

tasks.register('prepareMicroServer') {
    def jarFile = new File(file('build/.server'), 'pm.jar')
    if (!jarFile.exists()) {
        def payaraMicroServerUrl = 'https://repo1.maven.org/maven2/fish/payara/extras/payara-micro/6.2024.10/payara-micro-6.2024.10.jar'
        def folderStructure = file("build/.server")
        if (!folderStructure.exists()) {
            folderStructure.mkdirs()
        }
        println("Downloading payara micro server.....")
        new URL(payaraMicroServerUrl).withInputStream { inputStream ->
            jarFile.withOutputStream { outputStream ->
                outputStream << inputStream
            }
        }
        println("Downloaded payara micro server")
    } else {
        println("payara micro server exists")
    }
}

tasks.register('payaraMicroRun', JavaExec) {
    dependsOn war, prepareMicroServer
    classpath = files('build/.server/pm.jar')
    args = [ "--deploy", "build/libs/blog.war"]
}

tasks.register('payaraDeploy',Exec){
    dependsOn war

    def payaraRoot = System.getenv("PAYARA_ROOT")
    def asadminPath = file("${payaraRoot}/bin/asadmin").absolutePath
    def warFilePath = "${buildDir}/libs/blog.war"

    commandLine = [
            asadminPath,
            "deploy",
            "--force=true",
            warFilePath
    ]

}


war {
    archiveFileName = 'blog.war'
//    from('src/main/resources'){
//        include '**/*.*'
//    }
}

dependencies {
    compileOnly 'jakarta.platform:jakarta.jakartaee-api:10.0.0'
    implementation 'org.slf4j:slf4j-api:2.0.0'
    implementation 'ch.qos.logback:logback-classic:1.4.5'

    compileOnly 'org.projectlombok:lombok:1.18.36'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}